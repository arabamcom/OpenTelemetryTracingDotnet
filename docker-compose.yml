version: '3.4'

services:
    jaeger:
       image: jaegertracing/all-in-one:latest
       ports:
         - "16686:16686"
         - "14268"
         - "14250"
         - "6831:6831"

    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        ports:
            - "9411:9411"

    otel-collector:
       image: otel/opentelemetry-collector:0.29.0
       volumes:
         - ./otel-collector-config.yml:/etc/otel-collector-config.yml
       command: ["--config=/etc/otel-collector-config.yml"]
       ports:
         - "1888:1888"   # pprof extension
         - "13133:13133" # health_check extension
         - "4318:4318"        # OTLP HTTP receiver
         - "55670:55679" # zpages extension
       depends_on:
         - jaeger
         - zipkin

    zookeeper:
        image: wurstmeister/zookeeper
        hostname: zookeeper
        ports:
          - "2181:2181"

    kafka:
        image: wurstmeister/kafka
        hostname: kafka
        ports:
            - "9092:9092"
            - "9094:9094"
        links: 
            - zookeeper
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ADVERTISED_PORT: "9092"
            KAFKA_CREATE_TOPICS: "AddWeatherForecastV1"
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            #HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
            #HOSTNAME_COMMAND: curl http://169.254.169.254/latest/meta-data/public-hostname
            HOSTNAME_COMMAND: "echo 127.0.0.1"
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
            KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - zookeeper

    postgresql:
        ports:
          - "5431:5432"
        restart: always
        hostname: opentelemetry-postgresql
        environment:
          - POSTGRES_PASSWORD=guest
        volumes:
          - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
        image: 'postgres:11.12'
        
    
    api1:
        image: api1
        build:
            context: .
            dockerfile: Api1.Dockerfile
        ports:
          - "5000:80"
          - "5001:443"
        depends_on:
            - jaeger
            - zipkin
            - kafka
            - postgresql

    api2:
        image: api2
        build:
            context: .
            dockerfile: Api2.Dockerfile
        ports:
          - "5100:80"
          - "5101:443"
        depends_on:
            - api1